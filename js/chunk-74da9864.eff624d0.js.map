{"version":3,"sources":["webpack:///./src/views/Task.vue","webpack:///./src/views/Task.vue?4563","webpack:///./src/components/AppStatus.vue","webpack:///./src/components/AppStatus.vue?c1c7"],"names":["class","task","name","type","status","Date","timestamp","toLocaleDateString","desc","changeStatus","disabled","disableButton","id","components","AppStatus","setup","route","store","params","taskId","getters","dispatch","validateTimestamp","render","badge","statuses","props","require","String","onCnangeBadge","value"],"mappings":"4JACOA,MAAM,Q,EAEN,eAAuB,cAAf,UAAM,G,iBAAS,M,EACvB,eAAwB,cAAhB,WAAO,G,EACf,eAAyB,cAAjB,YAAQ,G,SAkBjBA,MAAM,qB,iBAA2B,mB,iBACE,U,iEAvBf,EAAAC,M,iBAAxB,eAqBM,MArBN,EAqBM,CApBJ,eAAsB,yBAAhB,EAAAA,KAAKC,MAAI,GACf,eAAiE,UAA9D,E,EAAyB,eAAiC,GAArBC,KAAM,EAAAF,KAAKG,Q,mBACnD,eAA2F,UAAxF,E,eAAwB,KAAE,mBAAOC,KAAmB,IAAd,EAAAJ,KAAKK,WAAkBC,sBAAkB,KAClF,eAA+C,UAA5C,E,eAAyB,KAAE,eAAE,EAAAN,KAAKO,MAAI,KACzC,eAeM,YAdJ,eAIS,UAJA,QAAK,+CAAU,EAAAC,aAAY,2BAC3BC,SAAU,EAAAC,cACXX,MAAM,OAAO,mBAErB,gBACA,eAIS,UAJA,QAAK,+CAAU,EAAAS,aAAY,wBAC3BC,SAAU,EAAAC,cACXX,MAAM,eAAc,cAE5B,gBACA,eAGS,UAHA,QAAK,+CAAU,EAAAS,aAAY,6BAC5BT,MAAM,cAAa,oB,iBAK/B,eAEK,KAFL,EAEK,C,EADW,eAAuB,6BAAb,EAAAY,IAAE,G,yDAWf,GACbC,WAAY,CAACC,YAAA,MACbC,MAAO,WACL,IAAMC,EAAQ,iBACRC,EAAQ,iBACRL,EAAKI,EAAME,OAAOC,OAClBlB,EAAOgB,EAAMG,QAAQnB,KAAKW,GAC1BH,EAAe,SAACL,GACpBa,EAAMI,SAAS,mBAAoB,CAACT,KAAGR,YAEnCO,EAAgB,gBAAS,kBAAM,OAAAW,EAAA,MAAkBrB,EAAKK,cAE5D,MAAO,CACLK,gBACAF,eACAG,KACAX,UChDN,EAAOsB,OAASA,EAED,gB,oGCJb,eAGO,QAHDvB,MAAK,CAAC,QACE,EAAAwB,Q,eACV,EAAAC,SAAS,EAAAtB,OAAI,G,gBAOJ,GACbuB,MAAO,CACLvB,KAAM,CACJwB,SAAS,EACTxB,KAAMyB,SAGVb,MAPa,SAOPW,GACJ,IAAMT,EAAQ,iBACRQ,EAAWR,EAAMG,QAAQK,SACzBD,EAAQ,eAAI,IACZK,EAAgB,WACD,WAAfH,EAAMvB,MACc,SAAfuB,EAAMvB,KADcqB,EAAMM,MAAQ,UAEnB,cAAfJ,EAAMvB,KAAsBqB,EAAMM,MAAQ,SAC3B,YAAfJ,EAAMvB,KAAoBqB,EAAMM,MAAQ,UAC5CN,EAAMM,MAAQ,UAKrB,OAHA,eAAUD,GACV,eAAUA,GAEH,CACLL,QACAC,cC9BN,EAAOF,OAASA,EAED","file":"js/chunk-74da9864.eff624d0.js","sourcesContent":["<template>\n  <div class=\"card\" v-if=\"task\">\n    <h2>{{task.name}}</h2>\n    <p><strong>Статус</strong>: <AppStatus :type=\"task.status\" /></p>\n    <p><strong>Дэдлайн</strong>: {{ new Date(task.timestamp * 1000).toLocaleDateString() }}</p>\n    <p><strong>Описание</strong>: {{task.desc}}</p>\n    <div>\n      <button @click.prevent=\"changeStatus('pending')\"\n              :disabled=\"disableButton\"\n              class=\"btn\" >\n        Взять в работу\n      </button>\n      <button @click.prevent=\"changeStatus('done')\"\n              :disabled=\"disableButton\"\n              class=\"btn primary\">\n        Завершить\n      </button>\n      <button @click.prevent=\"changeStatus('cancelled')\"\n              class=\"btn danger\">\n        Отменить\n      </button>\n    </div>\n  </div>\n  <h3 class=\"text-white center\" v-else>\n    Задачи с id = <strong>{{id}}</strong> нет.\n  </h3>\n</template>\n\n<script>\nimport { useRoute } from 'vue-router'\nimport { useStore } from 'vuex'\nimport { computed } from 'vue'\nimport AppStatus from '../components/AppStatus'\nimport validateTimestamp from \"@/use/validateTimestamp\"\n\nexport default {\n  components: {AppStatus},\n  setup: function () {\n    const route = useRoute()\n    const store = useStore()\n    const id = route.params.taskId\n    const task = store.getters.task(id)\n    const changeStatus = (status) => {\n      store.dispatch('changeStatusTask', {id,status})\n    }\n    const disableButton = computed(() => validateTimestamp(task.timestamp))\n\n    return {\n      disableButton,\n      changeStatus,\n      id,\n      task\n    }\n  }\n}\n</script>\n","import { render } from \"./Task.vue?vue&type=template&id=58285448\"\nimport script from \"./Task.vue?vue&type=script&lang=js\"\nexport * from \"./Task.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script","<template>\n  <span class=\"badge\"\n        :class=\"badge\">\n    {{statuses[type] }}\n  </span>\n</template>\n\n<script>\nimport {useStore} from \"vuex\"\nimport {ref, onMounted, onUpdated} from \"vue\"\nexport default {\n  props: {\n    type: {\n      require: true,\n      type: String\n    }\n  },\n  setup(props) {\n    const store = useStore()\n    const statuses = store.getters.statuses\n    const badge = ref('')\n    const onCnangeBadge = () => {\n      if (props.type === 'active') badge.value = 'primary'\n      else if (props.type === 'done') badge.value = 'primary'\n      else if (props.type === 'cancelled') badge.value = 'danger'\n      else if (props.type === 'pending') badge.value = 'warning'\n      else badge.value = 'danger'\n    }\n    onMounted(onCnangeBadge)\n    onUpdated(onCnangeBadge)\n\n    return {\n      badge,\n      statuses\n    }\n  }\n}\n</script>","import { render } from \"./AppStatus.vue?vue&type=template&id=74378cf0\"\nimport script from \"./AppStatus.vue?vue&type=script&lang=js\"\nexport * from \"./AppStatus.vue?vue&type=script&lang=js\"\nscript.render = render\n\nexport default script"],"sourceRoot":""}